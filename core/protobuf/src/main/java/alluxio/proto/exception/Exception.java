// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: exception.proto

package alluxio.proto.exception;

public final class Exception {
  private Exception() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code alluxio.proto.exception.Status}
   *
   * <pre>
   * exception status for a response.
   * </pre>
   */
  public enum Status
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>CANCELED = 1;</code>
     *
     * <pre>
     * Canceled indicates the operation was cancelled (typically by the caller).
     * </pre>
     */
    CANCELED(0, 1),
    /**
     * <code>UNKNOWN = 2;</code>
     *
     * <pre>
     * Unknown error.  An example of where this error may be returned is
     * if a Status value received from another address space belongs to
     * an error-space that is not known in this address space.  Also
     * errors raised by APIs that do not return enough error information
     * may be converted to this error.
     * </pre>
     */
    UNKNOWN(1, 2),
    /**
     * <code>INVALID_ARGUMENT = 3;</code>
     *
     * <pre>
     * InvalidArgument indicates client specified an invalid argument.
     * Note that this differs from FailedPrecondition. It indicates arguments
     * that are problematic regardless of the state of the system
     * (e.g., a malformed file name).
     * </pre>
     */
    INVALID_ARGUMENT(2, 3),
    /**
     * <code>DEADLINE_EXCEEDED = 4;</code>
     *
     * <pre>
     * DeadlineExceeded means operation expired before completion.
     * For operations that change the state of the system, this error may be
     * returned even if the operation has completed successfully. For
     * example, a successful response from a server could have been delayed
     * long enough for the deadline to expire.
     * </pre>
     */
    DEADLINE_EXCEEDED(3, 4),
    /**
     * <code>NOT_FOUND = 5;</code>
     *
     * <pre>
     * NotFound means some requested entity (e.g., file or directory) was
     * not found.
     * </pre>
     */
    NOT_FOUND(4, 5),
    /**
     * <code>ALREADY_EXISTS = 6;</code>
     *
     * <pre>
     * AlreadyExists means an attempt to create an entity failed because one
     * already exists.
     * </pre>
     */
    ALREADY_EXISTS(5, 6),
    /**
     * <code>PERMISSION_DENIED = 7;</code>
     *
     * <pre>
     * PermissionDenied indicates the caller does not have permission to
     * execute the specified operation. It must not be used for rejections
     * caused by exhausting some resource (use ResourceExhausted
     * instead for those errors).  It must not be
     * used if the caller cannot be identified (use Unauthenticated
     * instead for those errors).
     * </pre>
     */
    PERMISSION_DENIED(6, 7),
    /**
     * <code>UNAUTHENTICATED = 16;</code>
     *
     * <pre>
     * Unauthenticated indicates the request does not have valid
     * authentication credentials for the operation.
     * </pre>
     */
    UNAUTHENTICATED(7, 16),
    /**
     * <code>RESOURCE_EXHAUSTED = 8;</code>
     *
     * <pre>
     * ResourceExhausted indicates some resource has been exhausted, perhaps
     * a per-user quota, or perhaps the entire file system is out of space.
     * </pre>
     */
    RESOURCE_EXHAUSTED(8, 8),
    /**
     * <code>FAILED_PRECONDITION = 9;</code>
     *
     * <pre>
     * FailedPrecondition indicates operation was rejected because the
     * system is not in a state required for the operation's execution.
     * For example, directory to be deleted may be non-empty, an rmdir
     * operation is applied to a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FailedPrecondition, Aborted, and Unavailable:
     *  (a) Use Unavailable if the client can retry just the failing call.
     *  (b) Use Aborted if the client should retry at a higher-level
     *      (e.g., restarting a read-modify-write sequence).
     *  (c) Use FailedPrecondition if the client should not retry until
     *      the system state has been explicitly fixed.  E.g., if an "rmdir"
     *      fails because the directory is non-empty, FailedPrecondition
     *      should be returned since the client should not retry unless
     *      they have first fixed up the directory by deleting files from it.
     *  (d) Use FailedPrecondition if the client performs conditional
     *      REST Get/Update/Delete on a resource and the resource on the
     *      server does not match the condition. E.g., conflicting
     *      read-modify-write on the same resource.
     * </pre>
     */
    FAILED_PRECONDITION(9, 9),
    /**
     * <code>ABORTED = 10;</code>
     *
     * <pre>
     * Aborted indicates the operation was aborted, typically due to a
     * concurrency issue like sequencer check failures, transaction aborts,
     * etc.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     * </pre>
     */
    ABORTED(10, 10),
    /**
     * <code>OUT_OF_RANGE = 11;</code>
     *
     * <pre>
     * OutOfRange means operation was attempted past the valid range.
     * E.g., seeking or reading past end of file.
     *
     * Unlike InvalidArgument, this error indicates a problem that may
     * be fixed if the system state changes. For example, a 32-bit file
     * system will generate InvalidArgument if asked to read at an
     * offset that is not in the range [0,2^32-1], but it will generate
     * OutOfRange if asked to read from an offset past the current
     * file size.
     *
     * There is a fair bit of overlap between FailedPrecondition and
     * OutOfRange.  We recommend using OutOfRange (the more specific
     * error) when it applies so that callers who are iterating through
     * a space can easily look for an OutOfRange error to detect when
     * they are done.
     * </pre>
     */
    OUT_OF_RANGE(11, 11),
    /**
     * <code>UNIMPLEMENTED = 12;</code>
     *
     * <pre>
     * Unimplemented indicates operation is not implemented or not
     * supported/enabled in this service.
     * </pre>
     */
    UNIMPLEMENTED(12, 12),
    /**
     * <code>INTERNAL = 13;</code>
     *
     * <pre>
     * Internal errors.  Means some invariants expected by underlying
     * system has been broken.  If you see one of these errors,
     * something is very broken.
     * </pre>
     */
    INTERNAL(13, 13),
    /**
     * <code>UNAVAILABLE = 14;</code>
     *
     * <pre>
     * Unavailable indicates the service is currently unavailable.
     * This is a most likely a transient condition and may be corrected
     * by retrying with a backoff.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     * </pre>
     */
    UNAVAILABLE(14, 14),
    /**
     * <code>DATA_LOSS = 15;</code>
     *
     * <pre>
     * DataLoss indicates unrecoverable data loss or corruption.
     * </pre>
     */
    DATA_LOSS(15, 15),
    ;

    /**
     * <code>CANCELED = 1;</code>
     *
     * <pre>
     * Canceled indicates the operation was cancelled (typically by the caller).
     * </pre>
     */
    public static final int CANCELED_VALUE = 1;
    /**
     * <code>UNKNOWN = 2;</code>
     *
     * <pre>
     * Unknown error.  An example of where this error may be returned is
     * if a Status value received from another address space belongs to
     * an error-space that is not known in this address space.  Also
     * errors raised by APIs that do not return enough error information
     * may be converted to this error.
     * </pre>
     */
    public static final int UNKNOWN_VALUE = 2;
    /**
     * <code>INVALID_ARGUMENT = 3;</code>
     *
     * <pre>
     * InvalidArgument indicates client specified an invalid argument.
     * Note that this differs from FailedPrecondition. It indicates arguments
     * that are problematic regardless of the state of the system
     * (e.g., a malformed file name).
     * </pre>
     */
    public static final int INVALID_ARGUMENT_VALUE = 3;
    /**
     * <code>DEADLINE_EXCEEDED = 4;</code>
     *
     * <pre>
     * DeadlineExceeded means operation expired before completion.
     * For operations that change the state of the system, this error may be
     * returned even if the operation has completed successfully. For
     * example, a successful response from a server could have been delayed
     * long enough for the deadline to expire.
     * </pre>
     */
    public static final int DEADLINE_EXCEEDED_VALUE = 4;
    /**
     * <code>NOT_FOUND = 5;</code>
     *
     * <pre>
     * NotFound means some requested entity (e.g., file or directory) was
     * not found.
     * </pre>
     */
    public static final int NOT_FOUND_VALUE = 5;
    /**
     * <code>ALREADY_EXISTS = 6;</code>
     *
     * <pre>
     * AlreadyExists means an attempt to create an entity failed because one
     * already exists.
     * </pre>
     */
    public static final int ALREADY_EXISTS_VALUE = 6;
    /**
     * <code>PERMISSION_DENIED = 7;</code>
     *
     * <pre>
     * PermissionDenied indicates the caller does not have permission to
     * execute the specified operation. It must not be used for rejections
     * caused by exhausting some resource (use ResourceExhausted
     * instead for those errors).  It must not be
     * used if the caller cannot be identified (use Unauthenticated
     * instead for those errors).
     * </pre>
     */
    public static final int PERMISSION_DENIED_VALUE = 7;
    /**
     * <code>UNAUTHENTICATED = 16;</code>
     *
     * <pre>
     * Unauthenticated indicates the request does not have valid
     * authentication credentials for the operation.
     * </pre>
     */
    public static final int UNAUTHENTICATED_VALUE = 16;
    /**
     * <code>RESOURCE_EXHAUSTED = 8;</code>
     *
     * <pre>
     * ResourceExhausted indicates some resource has been exhausted, perhaps
     * a per-user quota, or perhaps the entire file system is out of space.
     * </pre>
     */
    public static final int RESOURCE_EXHAUSTED_VALUE = 8;
    /**
     * <code>FAILED_PRECONDITION = 9;</code>
     *
     * <pre>
     * FailedPrecondition indicates operation was rejected because the
     * system is not in a state required for the operation's execution.
     * For example, directory to be deleted may be non-empty, an rmdir
     * operation is applied to a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FailedPrecondition, Aborted, and Unavailable:
     *  (a) Use Unavailable if the client can retry just the failing call.
     *  (b) Use Aborted if the client should retry at a higher-level
     *      (e.g., restarting a read-modify-write sequence).
     *  (c) Use FailedPrecondition if the client should not retry until
     *      the system state has been explicitly fixed.  E.g., if an "rmdir"
     *      fails because the directory is non-empty, FailedPrecondition
     *      should be returned since the client should not retry unless
     *      they have first fixed up the directory by deleting files from it.
     *  (d) Use FailedPrecondition if the client performs conditional
     *      REST Get/Update/Delete on a resource and the resource on the
     *      server does not match the condition. E.g., conflicting
     *      read-modify-write on the same resource.
     * </pre>
     */
    public static final int FAILED_PRECONDITION_VALUE = 9;
    /**
     * <code>ABORTED = 10;</code>
     *
     * <pre>
     * Aborted indicates the operation was aborted, typically due to a
     * concurrency issue like sequencer check failures, transaction aborts,
     * etc.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     * </pre>
     */
    public static final int ABORTED_VALUE = 10;
    /**
     * <code>OUT_OF_RANGE = 11;</code>
     *
     * <pre>
     * OutOfRange means operation was attempted past the valid range.
     * E.g., seeking or reading past end of file.
     *
     * Unlike InvalidArgument, this error indicates a problem that may
     * be fixed if the system state changes. For example, a 32-bit file
     * system will generate InvalidArgument if asked to read at an
     * offset that is not in the range [0,2^32-1], but it will generate
     * OutOfRange if asked to read from an offset past the current
     * file size.
     *
     * There is a fair bit of overlap between FailedPrecondition and
     * OutOfRange.  We recommend using OutOfRange (the more specific
     * error) when it applies so that callers who are iterating through
     * a space can easily look for an OutOfRange error to detect when
     * they are done.
     * </pre>
     */
    public static final int OUT_OF_RANGE_VALUE = 11;
    /**
     * <code>UNIMPLEMENTED = 12;</code>
     *
     * <pre>
     * Unimplemented indicates operation is not implemented or not
     * supported/enabled in this service.
     * </pre>
     */
    public static final int UNIMPLEMENTED_VALUE = 12;
    /**
     * <code>INTERNAL = 13;</code>
     *
     * <pre>
     * Internal errors.  Means some invariants expected by underlying
     * system has been broken.  If you see one of these errors,
     * something is very broken.
     * </pre>
     */
    public static final int INTERNAL_VALUE = 13;
    /**
     * <code>UNAVAILABLE = 14;</code>
     *
     * <pre>
     * Unavailable indicates the service is currently unavailable.
     * This is a most likely a transient condition and may be corrected
     * by retrying with a backoff.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     * </pre>
     */
    public static final int UNAVAILABLE_VALUE = 14;
    /**
     * <code>DATA_LOSS = 15;</code>
     *
     * <pre>
     * DataLoss indicates unrecoverable data loss or corruption.
     * </pre>
     */
    public static final int DATA_LOSS_VALUE = 15;


    public final int getNumber() { return value; }

    public static Status valueOf(int value) {
      switch (value) {
        case 1: return CANCELED;
        case 2: return UNKNOWN;
        case 3: return INVALID_ARGUMENT;
        case 4: return DEADLINE_EXCEEDED;
        case 5: return NOT_FOUND;
        case 6: return ALREADY_EXISTS;
        case 7: return PERMISSION_DENIED;
        case 16: return UNAUTHENTICATED;
        case 8: return RESOURCE_EXHAUSTED;
        case 9: return FAILED_PRECONDITION;
        case 10: return ABORTED;
        case 11: return OUT_OF_RANGE;
        case 12: return UNIMPLEMENTED;
        case 13: return INTERNAL;
        case 14: return UNAVAILABLE;
        case 15: return DATA_LOSS;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Status>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<Status>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Status>() {
            public Status findValueByNumber(int number) {
              return Status.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return alluxio.proto.exception.Exception.getDescriptor().getEnumTypes().get(0);
    }

    private static final Status[] VALUES = values();

    public static Status valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private Status(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:alluxio.proto.exception.Status)
  }

  public interface PExceptionOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .alluxio.proto.exception.Status status = 1;
    /**
     * <code>optional .alluxio.proto.exception.Status status = 1;</code>
     */
    boolean hasStatus();
    /**
     * <code>optional .alluxio.proto.exception.Status status = 1;</code>
     */
    alluxio.proto.exception.Exception.Status getStatus();

    // optional string message = 2;
    /**
     * <code>optional string message = 2;</code>
     */
    boolean hasMessage();
    /**
     * <code>optional string message = 2;</code>
     */
    java.lang.String getMessage();
    /**
     * <code>optional string message = 2;</code>
     */
    com.google.protobuf.ByteString
        getMessageBytes();
  }
  /**
   * Protobuf type {@code alluxio.proto.exception.PException}
   */
  public static final class PException extends
      com.google.protobuf.GeneratedMessage
      implements PExceptionOrBuilder {
    // Use PException.newBuilder() to construct.
    private PException(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PException(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PException defaultInstance;
    public static PException getDefaultInstance() {
      return defaultInstance;
    }

    public PException getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PException(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              alluxio.proto.exception.Exception.Status value = alluxio.proto.exception.Exception.Status.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                status_ = value;
              }
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              message_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return alluxio.proto.exception.Exception.internal_static_alluxio_proto_exception_PException_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return alluxio.proto.exception.Exception.internal_static_alluxio_proto_exception_PException_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              alluxio.proto.exception.Exception.PException.class, alluxio.proto.exception.Exception.PException.Builder.class);
    }

    public static com.google.protobuf.Parser<PException> PARSER =
        new com.google.protobuf.AbstractParser<PException>() {
      public PException parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PException(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PException> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .alluxio.proto.exception.Status status = 1;
    public static final int STATUS_FIELD_NUMBER = 1;
    private alluxio.proto.exception.Exception.Status status_;
    /**
     * <code>optional .alluxio.proto.exception.Status status = 1;</code>
     */
    public boolean hasStatus() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .alluxio.proto.exception.Status status = 1;</code>
     */
    public alluxio.proto.exception.Exception.Status getStatus() {
      return status_;
    }

    // optional string message = 2;
    public static final int MESSAGE_FIELD_NUMBER = 2;
    private java.lang.Object message_;
    /**
     * <code>optional string message = 2;</code>
     */
    public boolean hasMessage() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string message = 2;</code>
     */
    public java.lang.String getMessage() {
      java.lang.Object ref = message_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          message_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string message = 2;</code>
     */
    public com.google.protobuf.ByteString
        getMessageBytes() {
      java.lang.Object ref = message_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        message_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      status_ = alluxio.proto.exception.Exception.Status.CANCELED;
      message_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, status_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getMessageBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, status_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getMessageBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static alluxio.proto.exception.Exception.PException parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static alluxio.proto.exception.Exception.PException parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static alluxio.proto.exception.Exception.PException parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static alluxio.proto.exception.Exception.PException parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static alluxio.proto.exception.Exception.PException parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static alluxio.proto.exception.Exception.PException parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static alluxio.proto.exception.Exception.PException parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static alluxio.proto.exception.Exception.PException parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static alluxio.proto.exception.Exception.PException parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static alluxio.proto.exception.Exception.PException parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(alluxio.proto.exception.Exception.PException prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code alluxio.proto.exception.PException}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements alluxio.proto.exception.Exception.PExceptionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return alluxio.proto.exception.Exception.internal_static_alluxio_proto_exception_PException_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return alluxio.proto.exception.Exception.internal_static_alluxio_proto_exception_PException_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                alluxio.proto.exception.Exception.PException.class, alluxio.proto.exception.Exception.PException.Builder.class);
      }

      // Construct using alluxio.proto.exception.Exception.PException.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        status_ = alluxio.proto.exception.Exception.Status.CANCELED;
        bitField0_ = (bitField0_ & ~0x00000001);
        message_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return alluxio.proto.exception.Exception.internal_static_alluxio_proto_exception_PException_descriptor;
      }

      public alluxio.proto.exception.Exception.PException getDefaultInstanceForType() {
        return alluxio.proto.exception.Exception.PException.getDefaultInstance();
      }

      public alluxio.proto.exception.Exception.PException build() {
        alluxio.proto.exception.Exception.PException result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public alluxio.proto.exception.Exception.PException buildPartial() {
        alluxio.proto.exception.Exception.PException result = new alluxio.proto.exception.Exception.PException(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.status_ = status_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.message_ = message_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof alluxio.proto.exception.Exception.PException) {
          return mergeFrom((alluxio.proto.exception.Exception.PException)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(alluxio.proto.exception.Exception.PException other) {
        if (other == alluxio.proto.exception.Exception.PException.getDefaultInstance()) return this;
        if (other.hasStatus()) {
          setStatus(other.getStatus());
        }
        if (other.hasMessage()) {
          bitField0_ |= 0x00000002;
          message_ = other.message_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        alluxio.proto.exception.Exception.PException parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (alluxio.proto.exception.Exception.PException) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .alluxio.proto.exception.Status status = 1;
      private alluxio.proto.exception.Exception.Status status_ = alluxio.proto.exception.Exception.Status.CANCELED;
      /**
       * <code>optional .alluxio.proto.exception.Status status = 1;</code>
       */
      public boolean hasStatus() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .alluxio.proto.exception.Status status = 1;</code>
       */
      public alluxio.proto.exception.Exception.Status getStatus() {
        return status_;
      }
      /**
       * <code>optional .alluxio.proto.exception.Status status = 1;</code>
       */
      public Builder setStatus(alluxio.proto.exception.Exception.Status value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        status_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .alluxio.proto.exception.Status status = 1;</code>
       */
      public Builder clearStatus() {
        bitField0_ = (bitField0_ & ~0x00000001);
        status_ = alluxio.proto.exception.Exception.Status.CANCELED;
        onChanged();
        return this;
      }

      // optional string message = 2;
      private java.lang.Object message_ = "";
      /**
       * <code>optional string message = 2;</code>
       */
      public boolean hasMessage() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string message = 2;</code>
       */
      public java.lang.String getMessage() {
        java.lang.Object ref = message_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          message_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string message = 2;</code>
       */
      public com.google.protobuf.ByteString
          getMessageBytes() {
        java.lang.Object ref = message_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          message_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string message = 2;</code>
       */
      public Builder setMessage(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        message_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string message = 2;</code>
       */
      public Builder clearMessage() {
        bitField0_ = (bitField0_ & ~0x00000002);
        message_ = getDefaultInstance().getMessage();
        onChanged();
        return this;
      }
      /**
       * <code>optional string message = 2;</code>
       */
      public Builder setMessageBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        message_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:alluxio.proto.exception.PException)
    }

    static {
      defaultInstance = new PException(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:alluxio.proto.exception.PException)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_alluxio_proto_exception_PException_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_alluxio_proto_exception_PException_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\017exception.proto\022\027alluxio.proto.excepti" +
      "on\"N\n\nPException\022/\n\006status\030\001 \001(\0162\037.allux" +
      "io.proto.exception.Status\022\017\n\007message\030\002 \001" +
      "(\t*\260\002\n\006Status\022\014\n\010CANCELED\020\001\022\013\n\007UNKNOWN\020\002" +
      "\022\024\n\020INVALID_ARGUMENT\020\003\022\025\n\021DEADLINE_EXCEE" +
      "DED\020\004\022\r\n\tNOT_FOUND\020\005\022\022\n\016ALREADY_EXISTS\020\006" +
      "\022\025\n\021PERMISSION_DENIED\020\007\022\023\n\017UNAUTHENTICAT" +
      "ED\020\020\022\026\n\022RESOURCE_EXHAUSTED\020\010\022\027\n\023FAILED_P" +
      "RECONDITION\020\t\022\013\n\007ABORTED\020\n\022\020\n\014OUT_OF_RAN" +
      "GE\020\013\022\021\n\rUNIMPLEMENTED\020\014\022\014\n\010INTERNAL\020\r\022\017\n",
      "\013UNAVAILABLE\020\016\022\r\n\tDATA_LOSS\020\017"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_alluxio_proto_exception_PException_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_alluxio_proto_exception_PException_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_alluxio_proto_exception_PException_descriptor,
              new java.lang.String[] { "Status", "Message", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
